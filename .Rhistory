fit   <- predict(mod, type='response')
lab   <- df$core_gmb_usd_f365_amt > 0
pred  <- prediction(fit, lab)
roc   <- performance(pred, 'tpr', 'fpr') # ROC curve
svs   <- performance(pred, 'tpr', 'tnr') # Sensitivity vs. specificity curve
auc   <- performance(pred, 'auc')        # area under ROC curve
# ROC curve
mtitle <- paste("ROC of",names(x)[1], "-- AUC:",
prettyNum(auc@y.values[[1]],digits=2),sep=" ")
cvnum  <- paste(k,'-fold cross-validated error rate: ',
prettyNum(cverr[1],digits=2),sep='')
plot(roc,main=mtitle,sub=cvnum)
# SvS curve
mtitle <- paste('SvS curves of',names(x)[1],sep=' ')
plot(svs@alpha.values[[1]], svs@x.values[[1]],
type='n', xlab='c', ylab='sensitivity or specificity')
lines(svs@alpha.values[[1]], svs@y.values[[1]], type='s')
lines(svs@alpha.values[[1]], svs@x.values[[1]], type='s', col=2)
legend(.6,.85, c('sensitivity', 'specificity'),
lty=c(1,1), col=1:2, cex=.9, bty='n')
title(main=mtitle)
# Best cutoff (or close to it)
tempmat <- cbind(svs@x.values[[1]],
svs@y.values[[1]],
svs@alpha.values[[1]])
tempmat <- tempmat[abs(tempmat[,1]-tempmat[,2]) <.02,]
bestc <- tempmat[abs(tempmat[,1]-tempmat[,2])==
min(abs(tempmat[,1]-tempmat[,2]))][3]
# Return these
out <- list(roc,svs,auc,bestc)
names(out) <- c('ROC','SvS','AUC','Best cutoff')
return(out)
}
# Many things on RHS: much missingness
existingCvLogit    <- runExisting()
curvesNoFactors    <- runDiagnostics(existingCvLogit[[1]])
curvesWithFactors  <- runDiagnostics(existingCvLogit[[2]])
# newusersCvLogit <- runNewusers() # -- no convergence initially, I think collinearity.
newusersCvLogit <- runNewusers()
curvesNoFactors    <- runDiagnostics(newusersCvLogit[[1]])
curvesWithFactors  <- runDiagnostics(newusersCvLogit[[2]])
curvesNoFactors    <- runDiagnostics(existingCvLogit[[1]])
curvesWithFactors  <- runDiagnostics(existingCvLogit[[2]])
names(newusersCvLogit)
names(existingCvLogit)
source('~/GitHub/github.scm.corp.ebay.com/CLV/code/model.R')
warnings()
sink(paste(dpath,paste(paste('warnings',Sys.Date(),sep='_'),'txt',sep='.'),sep='/'))
sink(warnings(),type='message')
unlink(paste(dpath,paste(paste('warnings',Sys.Date(),sep='_'),'txt',sep='.'),sep='/'))
zz <- file(paste(dpath,paste(paste('warnings',Sys.Date(),sep='_'),'txt',sep='.'),sep='/'),'w')
sink(zz)
sink(warnings(),type='message')
close(zz)
unlink(zz)
zz
dpath
dpath
print(dpath)
dpath <- "C:/Users/ghuiber/Documents/GitHub/github.scm.corp.ebay.com/CLV/data"
print(dpath)
dpath
sink()
unlink(zz)
zz <- file(paste(dpath,paste(paste('warnings',Sys.Date(),sep='_'),'txt',sep='.'),sep='/'),
open='wt')
sink(zz,type='message')
warnings()
sink()
close(zz)
warnings()
unlink(zz)
warnings()
sink()
warnings()
close(zz)
unlink(zz)
zz
close(zz)
unlink(zz)
sink()
sink()
close(zz)
unlink(zz)
rm(zz)
source('~/GitHub/github.scm.corp.ebay.com/CLV/code/model.R')
# Many things on RHS: much missingness
existingModels    <- runExisting()
curvesNoFactors    <- runDiagnostics(existingModels[[1]])
curvesWithFactors  <- runDiagnostics(existingModels[[2]])
newusersModels    <- runNewusers() # -- no convergence initially, collinearity.
curvesNoFactors    <- runDiagnostics(newusersModels[[1]])
curvesWithFactors  <- runDiagnostics(newusersModels[[2]])
save(existingModels,newusersModels, file=paste(dpath,paste(paste('clv',Sys.Date(),sep='_'),'Rdata',sep='.'),sep='/'))
zz <- file(paste(dpath,paste(paste('warnings',Sys.Date(),sep='_'),'txt',sep='.'),sep='/'),
open='wt')
sink(zz,type='message')
warnings()
sink()
close(zz)
# Many things on RHS => much missingness.
# k -- number of cross-validation folds
# pie -- probability cutoff for cv cost function
runCvLogit <- function(dt,depv,k=5,pie=.5) {
df    <- data.frame(dt)
df    <- na.omit(df[,c('core_gmb_usd_f365_amt',depv)])
myfml <- paste(yvar.logit,paste(depv,collapse='+'),sep='~')
mod   <- glm(as.formula(myfml), data = df, family='binomial', maxit=10000)
cost  <- function(lab, pi = 0) mean(abs(lab-pi) > pie)
cverr <- cv.glm(df,mod,cost,k)$delta
out        <- list(df,myfml,mod,cverr,k)
dataset    <- deparse(substitute(dt))
depvars    <- deparse(substitute(depv))
dataset    <- paste(dataset,depvars,sep='_')
names(out) <- c(dataset,'Formula','Model','CV error rate','K')
return(out)
}
# OLS part
runCvOLS <- function(dt,depv) {
df    <- data.frame(dt)
df    <- na.omit(subset(df[,c('core_gmb_usd_f365_amt',depv)],
core_gmb_usd_f365_amt>0))
myfml <- paste(yvar.ols,paste(depv,collapse='+'),sep='~')
mod   <- glm(as.formula(myfml), data = df, family=gaussian)
lmod  <- lm(as.formula(myfml), data = df)
# Quick LOOCV, formula (5.2) in IRLS
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
cverr <- loocv(mod)
rsq   <- summary(lmod)$adj.r.squared
out        <- list(df,myfml,mod,cverr,rsq)
dataset    <- deparse(substitute(dt))
depvars    <- deparse(substitute(depv))
dataset    <- paste(dataset,depvars,sep='_')
names(out) <- c(dataset,'Formula','Model','CV error rate','Adjusted R-squared')
return(out)
}
# logit diagnostics
runDiagnostics <- function(x) {
df    <- x[[1]]
mod   <- x[['Model']]
cverr <- x[['CV error rate']]
k     <- x[['K']]
fit   <- predict(mod, type='response')
lab   <- df$core_gmb_usd_f365_amt > 0
pred  <- prediction(fit, lab)
roc   <- performance(pred, 'tpr', 'fpr') # ROC curve
svs   <- performance(pred, 'tpr', 'tnr') # Sensitivity vs. specificity curve
auc   <- performance(pred, 'auc')        # area under ROC curve
# ROC curve
mtitle <- paste("ROC of",names(x)[1], "-- AUC:",
prettyNum(auc@y.values[[1]],digits=2),sep=" ")
cvnum  <- paste(k,'-fold cross-validated error rate: ',
prettyNum(cverr[1],digits=2),sep='')
plot(roc,main=mtitle,sub=cvnum)
# SvS curve
mtitle <- paste('SvS curves of',names(x)[1],sep=' ')
plot(svs@alpha.values[[1]], svs@x.values[[1]],
type='n', xlab='c', ylab='sensitivity or specificity')
lines(svs@alpha.values[[1]], svs@y.values[[1]], type='s')
lines(svs@alpha.values[[1]], svs@x.values[[1]], type='s', col=2)
legend(.6,.85, c('sensitivity', 'specificity'),
lty=c(1,1), col=1:2, cex=.9, bty='n')
title(main=mtitle)
# Best cutoff (or close to it)
tempmat <- cbind(svs@x.values[[1]],
svs@y.values[[1]],
svs@alpha.values[[1]])
tempmat <- tempmat[abs(tempmat[,1]-tempmat[,2]) <.02,]
bestc <- tempmat[abs(tempmat[,1]-tempmat[,2])==
min(abs(tempmat[,1]-tempmat[,2]))][3]
# Return these
out <- list(roc,svs,auc,bestc)
names(out) <- c('ROC','SvS','AUC','Best cutoff')
return(out)
}
# Many things on RHS: much missingness
existingModels    <- runExisting()
curvesNoFactors    <- runDiagnostics(existingModels[[1]])
curvesWithFactors  <- runDiagnostics(existingModels[[2]])
newusersModels    <- runNewusers() # -- no convergence initially, collinearity.
curvesNoFactors    <- runDiagnostics(newusersModels[[1]])
curvesWithFactors  <- runDiagnostics(newusersModels[[2]])
save(existingModels,newusersModels, file=paste(dpath,paste(paste('clv',Sys.Date(),sep='_'),'Rdata',sep='.'),sep='/'))
zz <- file(paste(dpath,paste(paste('warnings',Sys.Date(),sep='_'),'txt',sep='.'),sep='/'),
open='wt')
sink(zz,type='message')
warnings()
sink()
close(zz)
# Many things on RHS: much missingness
existingModels    <- runExisting()
curvesNoFactors    <- runDiagnostics(existingModels[[1]])
curvesWithFactors  <- runDiagnostics(existingModels[[2]])
newusersModels    <- runNewusers() # -- no convergence initially, collinearity.
curvesNoFactors    <- runDiagnostics(newusersModels[[1]])
curvesWithFactors  <- runDiagnostics(newusersModels[[2]])
save(existingModels,newusersModels, file=paste(dpath,paste(paste('clv',Sys.Date(),sep='_'),'Rdata',sep='.'),sep='/'))
require(syncR)
?syncR
ls('package:syncR')
install_devtools('ghuiber/syncR')
devtools::install_devtools('ghuiber/syncR')
require(devtools)
install_devtools('ghuiber/syncR')
detach("package:devtools", unload=TRUE)
devtools::install_github('ghuiber/syncR')
?syncR
install.packages(c("lme4", "mgcv", "RcppArmadillo"))
install.packages("googleVis")
library(googleVis)
library(manipulate)
library(gerbils)
hist(rnbinom(500, mu = 4, size = 1))
hist(rnbinom(500, mu = 10, size = 1))
x <- 0:15
size <- (1:20)/4
persp(x, size, dnb <- outer(x, size, function(x,s) dnbinom(x, s, prob = 0.4)),
xlab = "x", ylab = "s", zlab = "density", theta = 150)
title(tit <- "negative binomial density(x,s, pr = 0.4)  vs.  x & s")
image  (x, size, log10(dnb), main = paste("log [", tit, "]"))
contour(x, size, log10(dnb), add = TRUE)
## Alternative parametrization
x1 <- rnbinom(500, mu = 4, size = 1)
x2 <- rnbinom(500, mu = 4, size = 10)
x3 <- rnbinom(500, mu = 4, size = 100)
h1 <- hist(x1, breaks = 20, plot = FALSE)
h2 <- hist(x2, breaks = h1$breaks, plot = FALSE)
h3 <- hist(x3, breaks = h1$breaks, plot = FALSE)
barplot(rbind(h1$counts, h2$counts, h3$counts),
beside = TRUE, col = c("red","blue","cyan"),
names.arg = round(h1$breaks[-length(h1$breaks)]))
## Using "log = TRUE" for an extended range :
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
## extreme points are omitted since dbinom gives 0.
mtext("dbinom(k, log=TRUE)", adj = 0)
mtext("extended range", adj = 0, line = -1, font = 4)
mtext("log(dbinom(k))", col = "red", adj = 1)
dbinom(1,2,.5)
dbinom(1,10,.5)
dbinom(1,5,.5)
rbinom(1,5,.5)
rbinom(5,5,.5)
rbinom(5,5,rep(.5,5))
rep(.5,5)
rbinom(5,5,rep(.5,5))
rbinom(rep(1,5),5,rep(.5,5))
choose(5,2)
choose(5,2)
choose(5,2)
for (n in 0:10) print(choose(n, k = 0:n))
pbinom(1,2,.5)
pbinom(1,3,.5)
pbinom(1,8,.5)
pbinom(1,10,.5)
rbinom(1,10,.5)
mean(rep(rbinom(1,10,.5),100))
rep(rbinom(1,10,.5),100)
rbinom(5,5,rep(.5,5))
mean(rbinom(5,5,rep(.5,5)))
mean(rep(mean(rbinom(5,5,rep(.5,5))),10))
rbinom(5,5,rep(.5,5))
rbinom(5,5,rep(.5,5))
rbinom(5,5,rep(.5,5))
pbinom(5,5,rep(.5,5))
pbinom(5,5,.5)
dbinom(5,5,.5)
dbinom(46:54, 100, 0.5)
sum(dbinom(46:54, 100, 0.5))
plot(dbinom(46:54, 100, 0.5)
)
plot(dbinom(46:54, 1000, 0.5))
plot(dbinom(460:540, 1000, 0.5))
plot(dnorm())
plot(dnorm(1,0))
plot(dnorm(seq(-.5,.5,.1)))
plot(dnorm(seq(-.5,.5,.01)))
plot(dnorm(seq(-.1,.1,.01)))
plot(dnorm(seq(-.1,.1,.001)))
plot(dnorm(seq(-1,1,.01)))
plot(dnorm(seq(-2,2,.01)))
sum(dnorm(seq(-2,2,.01)))
sum(dnorm(seq(-1,1,.01)))
sum(dnorm(seq(-1.96,1.96,.01)))
sum(dnorm(seq(-1.96,1.96,.001)))
sum(dnorm(seq(-1.96,1.96,.001)))/1000
sum(dnorm(seq(-1.96,1.96,.01)))/100
pnorm(27.4, mean=50, sd=20)
1 - pnorm(19, mean=17.46, sd=sqrt(375.67))
x <- rnorm(1000, mean=100, sd=15)
hist(x, probability=TRUE)
xx <- seq(min(x), max(x), length=100)
lines(xx, dnorm(xx, mean=100, sd=15))
x <- rnorm(1000, mean=100, sd=5)
hist(x, probability=TRUE)
xx <- seq(min(x), max(x), length=100)
lines(xx, dnorm(xx, mean=100, sd=5))
dbinom(27, size=100, prob=0.25)
dbinom(27, 100, 0.25)
dbinom(1, 25, 0.005)
.005*25
dbinom(1, 25, 0.01)
.01*25
pbinom(27, size=100, prob=0.25)
pbinom(1, 25, 0.005)
dbinom(2, 25, 0.005)
dbinom(1, 25, 0.005)
qbinom(0.1, 10, 1/3)
qbinom(seq(0.1, 0.9, 0.1), 10, 1/3)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("UsingR")
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
## Create a plot with a slider
manipulate(plot(1:x), x = slider(5, 10))
## Use multiple sliders
manipulate(
plot(cars, xlim = c(x.min, x.max)),
x.min = slider(0,15),
x.max = slider(15,30))
## Specify a custom initial value for a slider
manipulate(
barplot(1:x),
x = slider(5, 25, initial = 10))
## Specify a custom label for a slider
manipulate(
barplot(1:x),
x = slider(5, 25, label = "Limit"))
## Specify a step value for a slider
manipulate(
barplot(1:x),
x = slider(5, 25, step = 5))
manipulate(plot(1:x), x = slider(1, 100))
sessionInfo()
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(plot(1:x), x = slider(1, 100))
sessionInfo()
install.packages(c("class", "googleVis", "mgcv", "MonetDB.R", "sandwich"))
syncR::syncPacks()
devtools::install_github("data.table", "Rdatatable", build_vignettes=FALSE)
sessionInfo()
library("httr", lib.loc="C:/Program Files/R/library")
?GET
setParam <- function(username,repo,ref='master') {
list(username,repo,ref)
}
foo <-setParam('ghuiber','devtools')
foo
setParam <- function(username, repo, ref='master', host='https://api.github.com/repos') {
out <- list(username,repo,ref)
names(out) <- c('username','repo','ref')
return(out)
}
foo <-setParam('ghuiber','devtools')
httr::GET(url=foo$host,user=foo$username,repos)
setParam <- function(username, repo, ref='master', host='https://api.github.com') {
out <- list(username,repo,ref)
names(out) <- c('username','repo','ref')
return(out)
}
foo <-setParam('ghuiber','devtools')
httr::GET(url=foo$host,user=foo$username,repos)
foo
setParam <- function(username, repo, ref='master', host='https://api.github.com') {
out <- list(username,repo,ref,host)
names(out) <- c('username','repo','ref','host')
return(out)
}
foo <-setParam('ghuiber','devtools')
httr::GET(url=foo$host,user=foo$username,repos)
# Build a GitHub GET request
setParam <- function(username, repo, ref='master', host='https://api.github.com') {
out <- list(username,repo,ref,host)
names(out) <- c('username','repo','ref','host')
return(out)
}
foo <-setParam('ghuiber','devtools')
httr::GET(url=foo$host,user=foo$username,path='repos')
Sys.getenv()
names(Sys.getenv())
source('~/.active-rstudio-document')
# Build a GitHub GET request
setParam <- function(username, repo, ref='master', host='https://api.github.com') {
out <- list(username,repo,ref,host)
names(out) <- c('username','repo','ref','host')
return(out)
}
foo <-setParam('ghuiber','devtools')
httr::GET(url=foo$host,user=foo$username,path='repos',access_token=Sys.getenv('GITHUB_PAT_PUBLIC'))
# Build a GitHub GET request
setParam <- function(username, repo, ref='master', host='https://api.github.com') {
out <- list(username,repo,ref,host)
names(out) <- c('username','repo','ref','host')
return(out)
}
foo <-setParam('ghuiber','devtools')
httr::GET(url=foo$host,user=foo$username,path='repos',
client_id=foo$username,client_secret=Sys.getenv('GITHUB_PAT_PUBLIC'))
devtools::install_github("RcppCore/RcppParallel")
install.packages("devtools")
devtools::install_github("RcppCore/RcppParallel")
sessionInfo()
devtools::install_github("ramnathv/Slidify")
devtools::install_github("ramnathv/SlidifyLibraries")
getwd()
setwd('GitHub')
setwd('shinyBullsDocs')
library(slidify)
setwd('..')
author('shinyBullsDocs')
library(knitr)
slidify('index.Rmd')
getwd()
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
publish('ghuiber','shinyBullsDocs')
publish('shinyBullsDocs','ghuiber')
publish('shinyBullsDocs','ghuiber')
Sys.getenv('PATH')
